using AnswerCube.BL.Domain;
using AnswerCube.BL.Domain.Project;
using AnswerCube.BL.Domain.Slide;
using AnswerCube.BL.Domain.User;
using Domain;
using Microsoft.AspNetCore.Identity;

namespace AnswerCube.BL;

public interface IManager
{
    List<Slide> GetOpenSlides();
    List<Slide> GetListOfSlides();
    List<Slide> GetSingleChoiceSlides();
    List<Slide> GetMultipleChoiceSlides();
    List<Slide> GetInfoSlides();
    Slide GetSlideFromFlow(int flowId, int number);
    SlideList GetSlideList();
    SlideList GetSlideListById(int id);
    bool AddAnswer(List<string> answers, int id);
    Slide GetSlideById(int id);
    Slide GetSlideFromSlideListByIndex(int index, int slideListId);
    Installation StartInstallationWithFlow(int installationId, int flowId);
    bool UpdateInstallation(int id);
    int[] GetIndexAndSlideListFromInstallations(int id);
    Slide GetActiveSlideByInstallationId(int id);
    List<IdentityRole> GetAllAvailableRoles(AnswerCubeUser user);
    List<AnswerCubeUser> GetAllUsers();
    bool GetDeelplatformBeheerderByEmail(string userEmail);
    bool AddDeelplatformBeheerderByEmail(string userEmail);
    bool RemoveDeelplatformBeheerderByEmail(string userEmail);
    List<Organization> GetOrganizationByUserId(string userId);
    Organization GetOrganizationById(int organizationId);
    bool DeleteProject(int id);
    Project GetProjectById(int projectid);
    Task<Project> CreateProject(int organizationId, string title, string description, bool isActive);
    Task<bool> UpdateProject(Project project);
    List<Answer> GetAnswers();
    bool CreateSlide(SlideType type, string question, string[]? options, int slideListId);
    List<Slide> GetAllSlides();
    bool CreateFlow(string name, string desc, bool circularFlow, int projectId);
    bool CreateSlidelist(string title, string description, int flowId);
    Project GetProjectWithFlowsById(int projectId);
    Flow GetFlowById(int flowId);
    SlideList GetSLideListByTitle(string title);
    Flow GetFlowWithProjectById(int flowId);
    SlideList GetSlideListWithFlowById(int slideListId);
    IEnumerable<SlideList> GetSlideListsByFlowId(int flowId);
    IEnumerable<Slide> GetSlidesBySlideListId(int slideListId);
    void UpdateFlow(Flow model);
    Organization CreateNewOrganization(string email, string name);
    bool AddUserToOrganization(AnswerCubeUser user);
    void SaveBeheerderAndOrganization(string email, Organization organization);
    void CreateUserOrganization(AnswerCubeUser user, Organization organization);
    List<UserOrganization> GetDeelplatformBeheerderUsers();
    bool RemoveSlideFromList(int slideId, int slidelistid);
    bool RemoveDpbFromOrganization(string userId, int organisationid);
    bool SearchDeelplatformByName(string deelplatformName);
    bool RemoveSlideListFromFlow(int slideListId, int flowId);
    List<Forum> GetForums();
    Forum GetForum(int forumId);
    bool AddIdea(int forumId, string title, string content);
    bool AddReaction(int ideaId, string reaction);
    int GetForumByIdeaId(int ideaId);

    int GetForumByReactionId(int reactionId);
    bool LikeReaction(int reactionId);
    bool DislikeReaction(int reactionId);
    bool LikeIdea(int ideaId);
    bool DislikeIdea(int ideaId);
    List<Installation> GetInstallationsByUserId(string userId);
    bool SetInstallationToActive(int installationId);
    List<Flow> getFlowsByUserId(string userId);
}