{"version":3,"file":"LinearFlow.entry.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,aAAa;AAClE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA,kBAAkB;AAClB,gEAAgE,cAAc;AAC9E;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA;AACA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA,uFAAuF,QAAQ,kBAAkB,QAAQ;AACzH;AACA;AACA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA,oFAAoF,QAAQ,kBAAkB,QAAQ;AACtH;AACA;AACA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA,oFAAoF,QAAQ,kBAAkB,QAAQ;AACtH;AACA;AACA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E","sources":["webpack://AnswerCube/./src/ts/flow/LinearFlow.ts"],"sourcesContent":["//function getSlideList() {\r\n//    fetch(appUrl + \"/api/Slides\",\r\n//        {\r\n//            method: \"GET\",\r\n//            headers: {\r\n//                \"Accept\": \"application/json\"\r\n//            }\r\n//        })\r\n//        .then(response => {\r\n//            if (response.status === 200) {\r\n//                return response.json();\r\n//            } else {\r\n//                document.getElementById(\"page\").innerHTML = \"<em>Problem!!!</em>\";\r\n//            }\r\n//        })\r\n//        .then(slideList => {\r\n//            console.log(slideList);\r\n//            updateCondition(slideList[1])\r\n//        })\r\n//}\r\n//\r\n//function updateCondition(newCondition) {\r\n//    fetch(appUrl + \"/api/Slides\", {\r\n//        method: \"POST\",\r\n//        headers: {\r\n//            'Content-Type': 'application/json',\r\n//            'Accept': 'application/json',\r\n//        },\r\n//        body: JSON.stringify(newCondition)\r\n//    }).then(res => {\r\n//        if(res.ok) {\r\n//            if(res.status === 201) {\r\n//                return res.json();\r\n//            }\r\n//        } else {\r\n//            alert(\"No 2xx code returned\")\r\n//        }\r\n//    }).catch(err => {\r\n//        alert(\"Something went wrong: \" + err);\r\n//    })\r\n//}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async function () {\r\n    const nextBtn = document.getElementById(\"next\");\r\n    const skipBtn = document.getElementById(\"skip\");\r\n    const slide = document.getElementById(\"slide\");\r\n    let input = HTMLElement;\r\n    let maxSlide = await getMaxSlides()\r\n    let currentSlide = 1;\r\n    addListeners()\r\n    console.log(maxSlide)\r\n    getSlide()\r\n    updateProgressBar();\r\n\r\n    function addListeners() {\r\n        console.log(nextBtn)\r\n        console.log(skipBtn)\r\n        if (nextBtn) {\r\n            nextBtn.addEventListener(\"click\", nextSlide);\r\n        }\r\n        if (skipBtn) {\r\n            skipBtn.addEventListener(\"click\", nextSlide);\r\n        }\r\n    }\r\n\r\n    function getSlide() {\r\n        if (currentSlide > maxSlide) {\r\n            currentSlide = 1\r\n            console.log(\"OUT OF SLIDES\")\r\n            //clearInterval(timer)\r\n        }\r\n        fetch(appUrl + `/api/flow/getSlideFromList/${currentSlide}`,\r\n            {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Accept\": \"application/json\"\r\n                }\r\n            })\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    slide.innerHTML = `<em>IT WORKS!!!! + ${currentSlide} </em>`;\r\n                    return response.json();\r\n                } else {\r\n                    slide.innerHTML = `<em>OUT OF SLIDES!!! + ${currentSlide} </em>`;\r\n                }\r\n            }).then(data => {\r\n            console.log(data);\r\n            switch (data.slideType?.toLowerCase()) {\r\n                case null:\r\n                    slide.innerHTML = `<em>No slides found!</em>`;\r\n                    break;\r\n                case \"openquestion\":\r\n                    console.log(\"open question slide\");\r\n                    slide.innerHTML = `<h4> ${data.text} </h4>`;\r\n                    slide.innerHTML += `<input type=\"text\" id=\"input\" value=\"\" placeholder=\"Answer the question.\">`;\r\n                    break;\r\n                case \"multiplechoice\":\r\n                    console.log(\"multiple choice slide\");\r\n                    slide.innerHTML = `<h3> ${data.text} </h3> `;\r\n                    for (const answers of data.answerList.$values) {\r\n                        slide.innerHTML += `<input type=\"checkbox\" id=\"input\" value=\"${answers}\" name=\"answer\">${answers}<br>`;\r\n                    }\r\n                    break;\r\n                case \"singlechoice\":\r\n                    console.log(\"Single choice slide\");\r\n                    slide.innerHTML = `<h3> ${data.text} </h3> `;\r\n                    for (const answers of data.answerList.$values) {\r\n                        slide.innerHTML += `<input type=\"radio\" id=\"input\" value=\"${answers}\" name=\"answer\">${answers}<br>`;\r\n                    }\r\n                    break;\r\n                case \"rangequestion\":\r\n                    console.log(\"Range Question slide\");\r\n                    slide.innerHTML = `<h3> ${data.text} </h3> `;\r\n                    for (const answers of data.answerList.$values) {\r\n                        slide.innerHTML += `<input type=\"radio\" id=\"input\" value=\"${answers}\" name=\"answer\">${answers}<br>`;\r\n                    }\r\n                    break;\r\n                case \"info\":\r\n                    console.log(\"Single choice slide\");\r\n                    slide.innerHTML = `<h3> ${data.text} </h3> `;\r\n                    break;\r\n                default:\r\n                    console.log(\"problem loading data\");\r\n                    slide.innerHTML = `<h4>Problem with loading the data</h4>`;\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n\r\n    function nextSlide() {\r\n        currentSlide++;\r\n        getSlide()\r\n        updateProgressBar();\r\n        PostAnswer();\r\n    }\r\n\r\n    function updateProgressBar() {\r\n        let totalQuestions = maxSlide; // total number of questions\r\n        let answeredQuestions = currentSlide; // number of answered questions\r\n\r\n        let progress = (answeredQuestions / totalQuestions) * 100;\r\n        console.log(progress)\r\n\r\n        let progressBar = document.getElementById(\"progressBar\");\r\n        progressBar.style.width = progress + \"%\";\r\n        progressBar.style.backgroundColor = \"limegreen\"; // Add this line\r\n    }\r\n\r\n    async function getMaxSlides() {\r\n        let numberOfSlides = 0;\r\n        await fetch(appUrl + `/api/flow/getMaxNumberOfSlides`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Accept\": \"application/json\"\r\n            }\r\n        }).then(async response => {\r\n            if (response.status === 200) {\r\n\r\n                numberOfSlides = await response.json().then(data => {\r\n                    console.log(data)\r\n                    return data.count;\r\n                });\r\n            }\r\n        })\r\n        return numberOfSlides;\r\n    }\r\n\r\n    function PostAnswer() {\r\n        let answer = getSelectedAnswers();\r\n        let slideId = currentSlide - 1;\r\n\r\n        let requestBody = {\r\n            Id: slideId,\r\n            Answer: answer\r\n        };\r\n        console.log(requestBody);\r\n        fetch(appUrl + `/api/flow/PostAnswer`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n            },\r\n            body: JSON.stringify(requestBody)\r\n        }).then(res => {\r\n            console.log(res)\r\n            if (res.ok) {\r\n                if (res.status === 201) {\r\n                    return res.json();\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.log(\"Something went wrong: \" + err);\r\n        })\r\n        console.log(answer);\r\n    }\r\n\r\n    function getSelectedAnswers() {\r\n        const checkboxes = document.querySelectorAll('input[name=\"answer\"]:checked');\r\n        let selectedAnswers = [];\r\n        if (checkboxes && checkboxes.length > 0) {\r\n            checkboxes.forEach((checkbox) => {\r\n                    // @ts-ignore\r\n                    selectedAnswers.push(checkbox.value);\r\n                }\r\n            );\r\n        }\r\n\r\n        //Get the value of the text input\r\n        const textInput = document.querySelector('input[type=\"text\"]#input');\r\n        // @ts-ignore\r\n        if (textInput && textInput.value) {\r\n            // @ts-ignore\r\n            selectedAnswers.push(textInput.value);\r\n        }\r\n        return selectedAnswers;\r\n    }\r\n});"],"names":[],"sourceRoot":""}