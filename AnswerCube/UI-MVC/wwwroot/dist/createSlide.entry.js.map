{"version":3,"file":"createSlide.entry.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACU","sources":["webpack://AnswerCube/webpack/bootstrap","webpack://AnswerCube/webpack/runtime/make namespace object","webpack://AnswerCube/./src/ts/Slide/CreateSlide.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nlet optionCount = 0;\nlet maxOptions = 8;\nwindow.addEventListener(\"DOMContentLoaded\", ev => {\n    const slideTypeElement = document.getElementById('slideType');\n    slideTypeElement.onchange = function (event) {\n        const selectElement = event.target;\n        showAnswerOptions(selectElement.value);\n    };\n    // Get the button element\n    const buttonElement = document.getElementById(\"upload-button\");\n    // Check if the button element exists\n    if (buttonElement) {\n        // Add a click event listener to the button\n        buttonElement.addEventListener(\"click\", () => __awaiter(void 0, void 0, void 0, function* () {\n            const imageElement = document.getElementById(\"uploaded-image\");\n            const formElement = document.getElementById(\"upload-form\");\n            //const resultElement = formElement.elements.namedItem(\"result\") as HTMLInputElement\n            const formData = new FormData(formElement);\n        }));\n    }\n});\nfunction showAnswerOptions(slideType) {\n    const answerOptionsDiv = document.getElementById('answerOptions');\n    const questionDiv = document.getElementById('questionDiv');\n    const label = document.getElementById(\"questionLabel\");\n    const input = document.getElementById(\"question\");\n    answerOptionsDiv.innerHTML = '';\n    optionCount = 0;\n    if (slideType === 'MultipleChoice' || slideType === 'SingleChoice') {\n        questionDiv.hidden = false;\n        label.innerText = \"Question:\";\n        input.placeholder = \"Question\";\n        maxOptions = 8;\n        CreateOptionField(answerOptionsDiv);\n    }\n    else if (slideType === 'RangeQuestion') {\n        questionDiv.hidden = false;\n        label.innerText = \"Question:\";\n        input.placeholder = \"Question\";\n        maxOptions = 5;\n        CreateOptionField(answerOptionsDiv);\n    }\n    else if (slideType === 'InfoSlide') {\n        questionDiv.hidden = false;\n        label.innerText = \"Info title:\";\n        input.placeholder = \"info title\";\n        CreateInfoField(answerOptionsDiv);\n    }\n    else if (slideType === 'OpenQuestion') {\n        questionDiv.hidden = false;\n        label.innerText = \"Question:\";\n        input.placeholder = \"Question\";\n    }\n    else if (slideType === '') {\n        questionDiv.hidden = true;\n    }\n}\nfunction CreateInfoField(optionsDiv) {\n    optionsDiv.innerHTML = '<div id=\"options\" class=\"form-group\"><label for=\"options\">Info text:</label>' +\n        '<div id=\"options0\" class=\"form-group mb-3\"><input type=\"text\" id=\"options0\" name=\"options\" class=\"form-control\" placeholder=\"Info\" required></div></div>';\n}\nfunction CreateOptionField(optionsDiv) {\n    optionsDiv.innerHTML = '<div id=\"options\" class=\"form-group\"><label for=\"options\">Options:</label>' +\n        '<div id=\"option0\" class=\"form-group mb-3\"><input type=\"text\" id=\"options0\" name=\"options\" class=\"form-control\" placeholder=\"option\" required></div>' +\n        '<div id=\"option1\" class=\"form-group mb-3\"><input type=\"text\" id=\"options1\" name=\"options\" class=\"form-control\" placeholder=\"option\" required></div></div>';\n    optionCount = 2;\n    const addButton = document.createElement('button');\n    addButton.textContent = 'Add Option';\n    addButton.onclick = addOption;\n    addButton.type = 'button';\n    addButton.classList.add('btn', 'btn-primary');\n    optionsDiv.appendChild(addButton);\n}\nfunction addOption() {\n    if (optionCount < maxOptions) {\n        const optionsDiv = document.getElementById('options');\n        const newOptionDiv = document.createElement('div');\n        newOptionDiv.id = 'option' + optionCount + 1;\n        newOptionDiv.style.display = 'flex';\n        newOptionDiv.style.justifyContent = 'space-between';\n        newOptionDiv.style.alignItems = 'center';\n        newOptionDiv.classList.add('form-group', 'mb-3');\n        const newOption = document.createElement('input');\n        newOption.type = 'text';\n        newOption.name = 'options';\n        newOption.id = 'options' + optionCount + 1;\n        newOption.className = 'form-control';\n        newOption.style.flexGrow = '1';\n        newOption.placeholder = 'option';\n        newOption.required = true;\n        const removeButton = document.createElement('button');\n        removeButton.onclick = () => removeOption(newOptionDiv.id);\n        removeButton.type = 'button';\n        removeButton.classList.add('btn', 'btn-small', 'btn-danger');\n        const icon = document.createElement('i');\n        icon.classList.add('fas', 'fa-trash');\n        removeButton.appendChild(icon);\n        newOptionDiv.appendChild(newOption);\n        newOptionDiv.appendChild(removeButton);\n        optionsDiv.appendChild(newOptionDiv);\n        optionCount++;\n    }\n    else {\n        alert('You can only add up to ' + (maxOptions + 1) + ' options.');\n    }\n}\nfunction removeOption(optionId) {\n    const optionDiv = document.getElementById(optionId);\n    if (optionDiv) {\n        optionDiv.remove();\n        optionCount--;\n    }\n}\nexport {};\n"],"names":[],"sourceRoot":""}