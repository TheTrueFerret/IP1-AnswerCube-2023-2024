{"version":3,"file":"multiplechoice.entry.js","mappings":";;;;;;;;;;;;;;;AAAA;AACO;AACP;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,gEAAgE;AAChE;AACA;AACO;AACP,4CAA4C;AAC5C,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpBO;AACP;AACA;AACA;AACA;;;;;;;UCJA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN6D;AACb;AAChD;AACA;AACA,iBAAiB,yDAAS;AAC1B;AACA,UAAU,sEAAyB;AACnC;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,6CAA6C,YAAY;AACzD;AACA,sFAAsF,QAAQ,kBAAkB,QAAQ;AACxH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,sEAAyB;AACnC;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C,wCAAwC;AACxC;AACA,kDAAkD;AAClD;AACA;AACA;AACA","sources":["webpack://AnswerCube/./src/ts/CookieHandler.ts","webpack://AnswerCube/./src/ts/urlDecoder.ts","webpack://AnswerCube/webpack/bootstrap","webpack://AnswerCube/webpack/runtime/define property getters","webpack://AnswerCube/webpack/runtime/hasOwnProperty shorthand","webpack://AnswerCube/webpack/runtime/make namespace object","webpack://AnswerCube/./src/ts/flow/slide/MultipleChoice.ts"],"sourcesContent":["// Function to set the cookie by name\nexport function setCookie(name, value, days) {\n    var expires = \"\";\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        expires = \"; expires=\" + date.toUTCString();\n    }\n    document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\n}\n// Function to retrieve cookie by name\nexport function getCookie(name) {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        if (cookie.startsWith(name + '=')) {\n            return cookie.substring(name.length + 1);\n        }\n    }\n    return null;\n}\n","export function RemoveLastDirectoryPartOf(the_url) {\n    var the_arr = the_url.split('/');\n    the_arr.pop();\n    return (the_arr.join('/'));\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { RemoveLastDirectoryPartOf } from \"../../urlDecoder\";\nimport { getCookie } from \"../../CookieHandler\";\nconst slideElement = document.getElementById(\"slide\");\nvar url = window.location.toString();\nconst jwtToken = getCookie(\"jwtToken\");\nfunction loadMultipleChoiceSlide() {\n    fetch(RemoveLastDirectoryPartOf(url) + \"/GetNextSlide/\", {\n        method: \"GET\",\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${jwtToken}`\n        }\n    }).then((response) => {\n        if (response.status === 200) {\n            return response.json();\n        }\n        else {\n            if (slideElement) {\n                slideElement.innerHTML = \"<em>problem!!!</em>\";\n            }\n        }\n    }).then((slide) => {\n        console.log(slide);\n        if (slideElement) {\n            slideElement.innerHTML = `<h3> ${slide.text} </h3> `;\n            for (const answers of slide.answerList) {\n                slideElement.innerHTML += `<input type=\"checkbox\" id=\"input\" value=\"${answers}\" name=\"answer\">${answers}<br>`;\n            }\n        }\n    }).catch((error) => {\n        console.error(error);\n        if (slideElement) {\n            slideElement.innerHTML = \"<em>Problem loading the slide</em>\";\n        }\n    });\n}\nloadMultipleChoiceSlide();\nconst btn = document.getElementById(\"submitAnswer\");\nif (btn) {\n    btn.addEventListener('click', postAnswer);\n}\nfunction postAnswer() {\n    let answer = getSelectedAnswers();\n    let requestBody = {\n        Answer: answer\n    };\n    console.log(requestBody);\n    fetch(RemoveLastDirectoryPartOf(url) + \"/PostAnswer\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            \"Authorization\": `Bearer ${jwtToken}`\n        },\n        body: JSON.stringify(requestBody)\n    }).then((response) => {\n        if (response.status === 200) {\n            return response.json();\n        }\n        else {\n            if (slideElement) {\n                slideElement.innerHTML = \"<em>problem!!!</em>\";\n            }\n        }\n    }).then((nextSlideData) => {\n        if (nextSlideData.url) {\n            // Redirect to the URL of the next slide\n            window.location.href = nextSlideData.url;\n        }\n    }).catch(err => {\n        console.log(\"Something went wrong: \" + err);\n    });\n    console.log(answer);\n}\nfunction getSelectedAnswers() {\n    const checkboxes = document.querySelectorAll('input[name=\"answer\"]:checked');\n    let selectedAnswers = [];\n    for (let i = 0; i < checkboxes.length; i++) {\n        const checkbox = checkboxes[i]; // Assert type to HTMLInputElement\n        if (checkbox.value) {\n            selectedAnswers.push(checkbox.value); // Use value property instead of nodeValue\n        }\n    }\n    return selectedAnswers;\n}\n"],"names":[],"sourceRoot":""}